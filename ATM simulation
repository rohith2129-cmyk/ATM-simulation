import java.util.Date;

public class Transaction {
    private String type; // Type of transaction (e.g., Deposit or Withdrawal)
    private double amount; // Amount involved in the transaction
    private Date date; // Date and time of the transaction

    // Constructor initializes the transaction with type and amount, and sets the date to the current time
    public Transaction(String type, double amount) {
        this.type = type;
        this.amount = amount;
        this.date = new Date(); // Automatically sets to current date and time
    }

    // This method formats the transaction as a string for easy display
    @Override
    public String toString() {
        return type + " of $" + amount + " on " + date;
    }
}

import java.util.ArrayList;
import java.util.List;

public class Account {
    private String accountNumber; // Unique account identifier
    private double balance; // Current balance in the account
    private List<Transaction> transactionHistory; // List of transactions

    // Constructor to initialize the account with an account number and initial balance
    public Account(String accountNumber, double initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
        this.transactionHistory = new ArrayList<>(); // Initializes an empty transaction history
    }

    // Method to get the current balance
    public double getBalance() {
        return balance;
    }

    // Method to deposit money into the account, updates balance and adds transaction
    public void deposit(double amount) {
        balance += amount;
        addTransaction("Deposit", amount);
    }

    // Method to withdraw money if there's enough balance, updates balance and adds transaction
    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            addTransaction("Withdrawal", amount);
            return true;
        } else {
            System.out.println("Insufficient balance!");
            return false;
        }
    }

    // Adds a transaction to the transaction history
    public void addTransaction(String type, double amount) {
        Transaction transaction = new Transaction(type, amount);
        transactionHistory.add(transaction);
    }

    // Prints the transaction history
    public void printTransactionHistory() {
        for (Transaction transaction : transactionHistory) {
            System.out.println(transaction);
        }
    }
}
import java.util.HashMap;
import java.util.Map;

public class Bank {
    private Map<String, Account> accounts; // Stores accounts with their account number as the key

    // Constructor initializes an empty account list
    public Bank() {
        accounts = new HashMap<>();
    }

    // Adds an account to the bank
    public void addAccount(Account account) {
        accounts.put(account.accountNumber, account);
    }

    // Authenticates and retrieves an account by its account number
    public Account authenticate(String accountNumber) {
        return accounts.get(accountNumber); // Returns account if found, otherwise null
    }
}
import java.util.Scanner;

public class ATM {
    private Bank bank; // Reference to the bank that stores accounts

    // Constructor to initialize the ATM with a reference to the bank
    public ATM(Bank bank) {
        this.bank = bank;
    }

    // Starts the ATM session by prompting for an account number and navigating to the main menu
    public void start() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter account number: ");
        String accountNumber = scanner.nextLine();
        
        Account account = bank.authenticate(accountNumber);
        if (account != null) { // If the account exists
            mainMenu(account);
        } else {
            System.out.println("Account not found!");
        }
        scanner.close();
    }

    // Main menu where the user can choose actions
    private void mainMenu(Account account) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("\n1. Check Balance");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Transaction History");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            // Switch statement for each menu option
            switch (choice) {
                case 1:
                    System.out.println("Balance: $" + account.getBalance());
                    break;
                case 2:
                    System.out.print("Enter amount to deposit: ");
                    double depositAmount = scanner.nextDouble();
                    account.deposit(depositAmount);
                    System.out.println("Deposit successful!");
                    break;
                case 3:
                    System.out.print("Enter amount to withdraw: ");
                    double withdrawAmount = scanner.nextDouble();
                    if (account.withdraw(withdrawAmount)) {
                        System.out.println("Withdrawal successful!");
                    }
                    break;
                case 4:
                    System.out.println("Transaction History:");
                    account.printTransactionHistory();
                    break;
                case 5:
                    System.out.println("Thank you for using the ATM!");
                    return; // Exits the menu
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}
public class Main {
    public static void main(String[] args) {
        Bank bank = new Bank(); // Creates a new bank
        Account account1 = new Account("12345", 500.0); // Creates an account with initial balance
        bank.addAccount(account1); // Adds the account to the bank

        ATM atm = new ATM(bank); // Creates an ATM linked to the bank
        atm.start(); // Starts the ATM session
    }
}
